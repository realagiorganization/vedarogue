;;; verses.el --- Generate LaTeX for verses side-by-side with translation -*- lexical-binding: t; -*-

;; Usage (non-interactive):
;;   emacs --batch -Q -l scripts/verses.el \
;;     --eval '(verses-generate-latex 
;;                :json "build/verses.json" 
;;                :out  "build/verses.tex" 
;;                :range "train:0-10" 
;;                :title "Selected Verses")'

(require 'json)
(require 'cl-lib)

(defun verses--read-json (path)
  (with-temp-buffer
    (insert-file-contents path)
    (let ((json-array-type 'list)
          (json-object-type 'alist)
          (json-false :false)
          (json-null nil))
      (json-read))))

(defun verses--escape-tex (s)
  (let ((tbl '(("\\" . "\\textbackslash{}")
               ("{"  . "\\{")
               ("}"  . "\\}")
               ("$"  . "\\$")
               ("#"  . "\\#")
               ("%"  . "\\%")
               ("&"  . "\\&")
               ("_"  . "\\_")
               ("^"  . "\\textasciicircum{}")
               ("~"  . "\\textasciitilde{}"))))
    (cl-reduce (lambda (acc pair)
                 (replace-regexp-in-string (car pair) (cdr pair) acc t t))
               tbl :initial-value (or s ""))))

(defun verses--parse-range (range)
  "Parse RANGE string like 'train:0-10', '0-10', '5'.
Returns plist: (:split maybe-string :start number :end number)."
  (when (and range (not (string-empty-p range)))
    (let* ((parts (split-string range ":"))
           (split (when (> (length parts) 1) (car parts)))
           (rest  (car (last parts)))
           (se (split-string rest "-"))
           (start (string-to-number (car se)))
           (end   (string-to-number (or (cadr se) (car se)))))
      (list :split split :start start :end end))) )

(defun verses--filter-range (rows range)
  "Filter ROWS (list of alists) by RANGE plist. Each row should have 'split and 'index."
  (let* ((split (plist-get range :split))
         (start (plist-get range :start))
         (end   (plist-get range :end)))
    (seq-filter (lambda (r)
                  (and (or (null split) (equal (alist-get 'split r) split))
                       (let ((i (alist-get 'index r)))
                         (and (numberp i) (>= i start) (<= i end)))))
                rows)))

(defun verses--write-latex (rows out title)
  (with-temp-file out
    (insert "% Generated by verses.el\n")
    (insert "\\documentclass[12pt]{article}\n")
    (insert "\\usepackage{fontspec}\n")
    (insert "\\usepackage{polyglossia}\n")
    (insert "\\setmainlanguage{english}\\setotherlanguage{sanskrit}\n")
    (insert "\\newfontfamily\\sanskritfont[Script=Devanagari]{Noto Sans Devanagari}\n")
    (insert "\\newfontfamily\\englishfont{Latin Modern Roman}\n")
    (insert "\\usepackage[a4paper,margin=1in]{geometry}\n")
    (insert "\\usepackage{paracol}\n")
    (insert "\\usepackage[hidelinks]{hyperref}\n")
    (insert "\\setlength{\\parskip}{0.5em}\n")
    (insert "\\begin{document}\n\n")
    (when (and title (not (string-empty-p title)))
      (insert (format "\\section*{%s}\n\n" (verses--escape-tex title))))
    (dolist (r rows)
      (let* ((idx (alist-get 'index r))
             (split (or (alist-get 'split r) ""))
             (verse (or (alist-get 'verse r) (alist-get 'document r) ""))
             (translation (or (alist-get 'translation r) "")))
        (insert "\\begin{paracol}{2}\n")
        (insert "\\switchcolumn*\\raggedright\n")
        (insert (format "\\textbf{%%s:%%d}\\par\n" split idx))
        (insert "\\begin{sanskrit}\n")
        (insert (verses--escape-tex verse))
        (insert "\n\\end{sanskrit}\n")
        (insert "\\switchcolumn\\raggedright\n")
        (insert (if (and translation (not (string-empty-p translation)))
                    (verses--escape-tex translation)
                  "\\emph{(no translation provided)}"))
        (insert "\n\\end{paracol}\n\n")))
    (insert "\\end{document}\n")))

(defun verses-generate-latex (&rest args)
  "Generate LaTeX file from JSON pairs. Keyword ARGS:
  :json  path to JSON array file (each object should have fields: split, index, verse, translation)
  :out   output tex path
  :range range string like 'train:0-10' (optional; if nil, include all)
  :title document title (optional)."
  (let* ((json (or (plist-get args :json) (getenv "VJSON") "build/verses.json"))
         (out  (or (plist-get args :out)  (getenv "VOUT")  "build/verses.tex"))
         (range-str (or (plist-get args :range) (getenv "VRANGE")))
         (title (or (plist-get args :title) (getenv "VTITLE") "Selected Verses"))
         (rows (verses--read-json json))
         (rplist (verses--parse-range range-str))
         (sel (if rplist (verses--filter-range rows rplist) rows)))
    (make-directory (file-name-directory out) t)
    (verses--write-latex sel out title)
    (princ (format "Wrote LaTeX to %s with %d entries\n" out (length sel)))))

;; Allow CLI call like: emacs -Q --batch -l scripts/verses.el -f verses-main
(defun verses-main ()
  (verses-generate-latex))

;;; verses.el ends here

