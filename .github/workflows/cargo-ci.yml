name: Cargo CI

on:
  push:
  pull_request:

jobs:
  build-test:
    name: Build and Test (Rust)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets -- -D warnings
      - name: Build
        run: cargo build --verbose
      - name: Test
        run: cargo test --all --verbose

  docker-build:
    name: Dockerize make-runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -f docker/cargo/Dockerfile -t make-runner:ci .
      - name: Smoke run make list via container
        run: |
          docker run --rm -v "$PWD:/work" -w /work make-runner:ci list
      - name: Run Docker tests and capture CSV logs
        run: |
          bash scripts/run_docker_tests.sh
      - name: Convert CSV logs to YAML
        run: |
          python3 scripts/csv_to_yaml.py build/test_logs/tests.csv build/test_logs/tests.yaml
      - name: Upload Docker test logs
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-logs
          path: build/test_logs
      - name: Generate deployments catalog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bash scripts/generate_deployments_readme.sh
      - name: LFS budget audit
        continue-on-error: true
        env:
          LFS_AUDIT_FAIL: "true"
        run: |
          bash scripts/check_lfs_budget.sh
      - name: Upload LFS audit logs
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: lfs-audit-logs
          path: build/lfs_report
      - name: Upload deployments catalog
        uses: actions/upload-artifact@v4
        with:
          name: deployments-readme
          path: README.deployments.md

  run-make-via-cargo:
    name: Execute Make targets via cargo runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Run `make list`
        run: cargo run -- list
      - name: Run `make env-sync`
        run: cargo run -- run env-sync

  publish:
    name: Publish to crates.io
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Package
        run: cargo package
      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --no-verify

  release:
    name: Create GitHub Release
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    needs: [docker-build]
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Download docker test logs
        uses: actions/download-artifact@v4
        with:
          name: docker-test-logs
          path: artifacts/docker-test-logs
      - name: Download deployments readme
        uses: actions/download-artifact@v4
        with:
          name: deployments-readme
          path: artifacts/deployments
      - name: Generate release body
        run: |
          bash scripts/generate_release_body.sh > RELEASE_BODY.md
          echo "Release body:" && sed -n '1,120p' RELEASE_BODY.md
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          body_path: RELEASE_BODY.md
          files: |
            artifacts/docker-test-logs/**
            artifacts/deployments/README.deployments.md
  docker-publish:
    name: Publish Docker Images to GHCR
    if: github.ref == 'refs/heads/main' || startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      - name: Log in to GHCR
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      - name: Build make-runner image
        run: |
          docker build -f docker/cargo/Dockerfile -t make-runner:ci .
      - name: Tag and push make-runner
        env:
          NS: ghcr.io/${{ github.repository }}
        run: |
          SHA_TAG=$NS/make-runner:${{ github.sha }}
          docker tag make-runner:ci "$SHA_TAG"
          docker push "$SHA_TAG"
          if [[ "${{ github.ref }}" == refs/heads/main ]]; then
            LATEST_TAG=$NS/make-runner:latest
            docker tag make-runner:ci "$LATEST_TAG"
            docker push "$LATEST_TAG"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VER_TAG=$NS/make-runner:${{ github.ref_name }}
            docker tag make-runner:ci "$VER_TAG"
            docker push "$VER_TAG"
          fi
      - name: Build emacs image
        run: |
          docker build -f docker/emacs/Dockerfile -t emacs-tui:ci .
      - name: Tag and push emacs image
        env:
          NS: ghcr.io/${{ github.repository }}
        run: |
          SHA_TAG=$NS/emacs:${{ github.sha }}
          docker tag emacs-tui:ci "$SHA_TAG"
          docker push "$SHA_TAG"
          if [[ "${{ github.ref }}" == refs/heads/main ]]; then
            LATEST_TAG=$NS/emacs:latest
            docker tag emacs-tui:ci "$LATEST_TAG"
            docker push "$LATEST_TAG"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VER_TAG=$NS/emacs:${{ github.ref_name }}
            docker tag emacs-tui:ci "$VER_TAG"
            docker push "$VER_TAG"
          fi
      - name: Build Linux TUI dev image (tui-wsl)
        run: |
          docker build -f docker/linux/Dockerfile -t tui-wsl:ci .
      - name: Tag and push tui-wsl image
        env:
          NS: ghcr.io/${{ github.repository }}
        run: |
          SHA_TAG=$NS/tui-wsl:${{ github.sha }}
          docker tag tui-wsl:ci "$SHA_TAG"
          docker push "$SHA_TAG"
          if [[ "${{ github.ref }}" == refs/heads/main ]]; then
            LATEST_TAG=$NS/tui-wsl:latest
            docker tag tui-wsl:ci "$LATEST_TAG"
            docker push "$LATEST_TAG"
          elif [[ "${{ github.ref }}" == refs/tags/* ]]; then
            VER_TAG=$NS/tui-wsl:${{ github.ref_name }}
            docker tag tui-wsl:ci "$VER_TAG"
            docker push "$VER_TAG"
          fi
