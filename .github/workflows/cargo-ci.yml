name: Cargo CI

on:
  push:
  pull_request:

jobs:
  build-test:
    name: Build and Test (Rust)
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, macos-latest, windows-latest]
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Format check
        run: cargo fmt --all -- --check
      - name: Clippy
        run: cargo clippy --all-targets -- -D warnings
      - name: Build
        run: cargo build --verbose
      - name: Test
        run: cargo test --all --verbose

  docker-build:
    name: Dockerize make-runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Build image
        run: docker build -f docker/cargo/Dockerfile -t make-runner:ci .
      - name: Smoke run make list via container
        run: |
          docker run --rm -v "$PWD:/work" -w /work make-runner:ci list
      - name: Run Docker tests and capture CSV logs
        run: |
          bash scripts/run_docker_tests.sh
      - name: Convert CSV logs to YAML
        run: |
          python3 scripts/csv_to_yaml.py build/test_logs/tests.csv build/test_logs/tests.yaml
      - name: Upload Docker test logs
        uses: actions/upload-artifact@v4
        with:
          name: docker-test-logs
          path: build/test_logs
      - name: Generate deployments catalog
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          bash scripts/generate_deployments_readme.sh
      - name: Upload deployments catalog
        uses: actions/upload-artifact@v4
        with:
          name: deployments-readme
          path: README.deployments.md

  run-make-via-cargo:
    name: Execute Make targets via cargo runner
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy
      - name: Run `make list`
        run: cargo run -- list
      - name: Run `make env-sync`
        run: cargo run -- run env-sync

  publish:
    name: Publish to crates.io
    if: startsWith(github.ref, 'refs/tags/')
    runs-on: ubuntu-latest
    permissions:
      contents: read
    steps:
      - uses: actions/checkout@v4
      - name: Setup Rust
        uses: dtolnay/rust-toolchain@stable
      - name: Package
        run: cargo package
      - name: Publish
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CRATES_IO_TOKEN }}
        run: cargo publish --no-verify
